[aliases]
test=pytest

[yapf]
# Determines which of the predefined styles this custom style is based on.
based_on_style = google

# Align closing bracket with visual indentation.
ALIGN_CLOSING_BRACKET_WITH_VISUAL_INDENT = true

# Insert a blank line before a 'def' or 'class' immediately
# nested within another 'def' or 'class'.
# For example:
# class Foo:
#                    # <------ this blank line
#   def method():
#     ...
BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF = false

# The column limit.
COLUMN_LIMIT = 98

# Indent width for line continuations.
CONTINUATION_INDENT_WIDTH = 3

# Put closing brackets on a separate line, dedented, if the
# bracketed expression can't fit in a single line. Applies to
# all kinds of brackets, including function definitions and calls.
# For example:
# config = {
#     'key1': 'value1',
#     'key2': 'value2',
# }        # <--- this bracket is dedented and on a separate line
# time_series = self.remote_client.query_entity_counters(
#   entity='dev3246.region1',
#   key='dns.query_latency_tcp',
#   transform=Transformation.AVERAGE(window=timedelta(seconds=60)),
#   start_ts=now()-timedelta(days=3),
#   end_ts=now(),
# )        # <--- this bracket is dedented and on a separate line

DEDENT_CLOSING_BRACKETS = false

# The regex for an i18n comment. The presence of this comment stops
# reformatting of that line, because the comments are required to be
# next to the string they translate.
I18N_COMMENT = ""

# The i18n function call names. The presence of this function stops
# reformattting on that line, because the string it has cannot be moved
# away from the i18n comment.
I18N_FUNCTION_CALL = ""

# Indent the dictionary value if it cannot fit on the same line as the dictionary key.
# For example:
# config = {
#     'key1':
#         'value1',
#     'key2': value1 +
#             value2,
# }
INDENT_DICTIONARY_VALUE = false

# The number of columns to use for indentation.
INDENT_WIDTH = 3

# Join short lines into one line. E.g., single line if statements.
JOIN_MULTIPLE_LINES = true

# Insert a space between the ending comma and closing bracket of a list,
# etc.
SPACE_BETWEEN_ENDING_COMMA_AND_CLOSING_BRACKET = true

# The number of spaces required before a trailing comment.
SPACES_BEFORE_COMMENT = 2

# Set to True to prefer splitting before &, | or ^ rather than after.
SPLIT_BEFORE_BITWISE_OPERATOR = true





# Set to True to prefer splitting before 'and' or 'or' rather than
# after.
SPLIT_BEFORE_LOGICAL_OPERATOR = true

# Split named assignments onto individual lines.
SPLIT_BEFORE_NAMED_ASSIGNS = false



# The penalty for splitting right after the opening bracket.
SPLIT_PENALTY_AFTER_OPENING_BRACKET = 30

# The penalty for splitting the line after a unary operator.
SPLIT_PENALTY_AFTER_UNARY_OPERATOR = 10000

# The penalty of splitting the line around the &, |, and ^ operators.
SPLIT_PENALTY_BITWISE_OPERATOR = 300

# The penalty for characters over the column limit.
SPLIT_PENALTY_EXCESS_CHARACTER = 2500

# The penalty incurred by adding a line split to the unwrapped line. The
# more line splits added the higher the penalty.
SPLIT_PENALTY_FOR_ADDED_LINE_SPLIT = 30

# The penalty of splitting a list of import as names.
# For example:
#   from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,
#                                                             long_argument_2,
#                                                             long_argument_3)
# would reformat to something like:
# from a_very_long_or_indented_module_name_yada_yad import (
#     long_argument_1, long_argument_2, long_argument_3)
SPLIT_PENALTY_IMPORT_NAMES = 0

# The penalty of splitting the line around the 'and' and 'or' operators.
SPLIT_PENALTY_LOGICAL_OPERATOR = 300


BLANK_LINES_AROUND_TOP_LEVEL_DEFINITION = 1


